#!/usr/bin/php
<?php

# Definitions

$debug = false;     // Verbose debug? (run nullmailer-send to see)
$abort = false;     // Return a error so nullmailer dont delete mails in spool. Beware: bulk sends in duplicate!!!

$MAIL_FROM = null;	// Null to read from X-Cron-Env headers, or "dest@host.tld" to a fixed address.
$MAIL_TO   = null;

$argv[0] = str_replace( "smtpfix" , "smtp" , $argv[0] );

# Read & capture

$lines = explode( "\n" , file_get_contents( 'php://stdin' ) );

for ( $i = 0 ; $i < count( $lines ) ; $i++ )
{
	if ( $debug )
		print "i> " . $lines[$i] . "\n";
	
	if ( $MAIL_FROM == null and substr( $lines[$i] , 0 , 5 ) == "From:" )
	{
		$MAIL_FROM = trim( substr( $lines[$i] , 5 ) );
		$MAIL_FROM = str_replace( "<" , "" , $MAIL_FROM );
		$MAIL_FROM = str_replace( ">" , "" , $MAIL_FROM );
	}
	
	if ( $MAIL_TO != null and substr( $lines[$i] , 0 , 3 ) == "To:" )
	{
		$MAIL_TO = trim( substr( $lines[$i] , 3 ) );
		$MAIL_TO = str_replace( "<" , "" , $MAIL_TO );
		$MAIL_TO = str_replace( ">" , "" , $MAIL_TO );
	}
}

if ( $MAIL_FROM == null ) $MAIL_FROM = $lines[0];
if ( $MAIL_TO   == null ) $MAIL_TO   = $lines[1];

if ( trim( $MAIL_FROM ) == "" ) $MAIL_FROM = null;
if ( trim( $MAIL_TO   ) == "" ) $MAIL_TO   = null;

if ( $MAIL_FROM == null and $MAIL_TO != null ) $MAIL_FROM = $MAIL_TO;
if ( $MAIL_FROM != null and $MAIL_TO == null ) $MAIL_TO = $MAIL_FROM;

if ( $debug )
{
	print "---\n";	
	print "FROM: " . $MAIL_FROM . "\n";
	print "TO:   " . $MAIL_TO . "\n";
	print "---\n";
}

# Replace

if ( $MAIL_FROM != null ) $lines[ 0 ] = $MAIL_FROM;
if ( $MAIL_TO   != null ) $lines[ 1 ] = $MAIL_TO;

for ( $i = 0 ; $i < count( $lines ) ; $i++ )
{
	if ( $MAIL_FROM != null and substr( $lines[$i] , 0 , 5 ) == "From:" )
	{
		$lines[$i] = "From: " . $MAIL_FROM;
	}
	
	if ( $MAIL_TO != null and substr( $lines[$i] , 0 , 3 ) == "To:" )
	{
		$lines[$i] = "To: " . $MAIL_TO;
	}
	
	if ( $MAIL_TO != null and $lines[$i] == "Cc: recipient list not shown: ;" )
	{
		$lines[$i] = "To: " . $MAIL_TO;
	}
}

# Real call

$cmd = implode( " " , $argv ) ;
$pipes = array( array( 'pipe' , 'r' ) , array( 'pipe' , 'w' ) , array( 'pipe' , 'w' ) );

$proc = proc_open( $cmd , $pipes , $pipes );

foreach( $lines as $line )
{
	if ( $line !== null )
	{
		if ( $debug )
			print "o> " . $line . "\n";
		fwrite( $pipes[0] , $line . "\n" );
	}
}

fclose( $pipes[0] );

$out = stream_get_contents( $pipes[1] );
$err = stream_get_contents( $pipes[2] );

fclose( $pipes[1] );
fclose( $pipes[2] );

$ret = proc_close( $proc );

# Debug

if ( $debug )
{
	print "---\n";
	print "RET: " . $ret . "\n";
	
	if ( $out != "" )
	{
		print "---\n";
		print "OUT:\n";
		print $out . "\n";
	}
	if ( $err != "" )
	{
		print "---\n";
		print "ERR:\n";
		print $err . "\n";
	}
	
	print "---\n";
}

# The end

if ( $abort )
	exit( -1 );
else
	exit( $ret );
